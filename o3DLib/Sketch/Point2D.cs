//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace o3DLib.Sketching
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Text;
    using Relations2D;
    using System.Windows;
    using System.Windows.Media.Media3D;

    public class Point2D : HelixToolkit.Wpf.PointsVisual3D, IRelatable, IIntersectable
	{
        public Point2D():base() { this.Size = 5; }

        public Point2D(double X, double Y) : base()
        {
            this.Point = new Point(X, Y);
        }

        public Point2D(Entity2D parent):this()
        {
            this.Parent = parent;
            this.Points = new List<Point3D>() { this.Sketch.RefPlane.GetPoint3D(Point) };
        }

        public Point2D(Entity2D parent, Point point) : this(parent)
        {
            this.Point = point;
        }

        protected override void UpdateGeometry()
        {
            base.UpdateGeometry();
        }

        public Sketch Sketch
        {
            get
            {
                return this.Parent.Parent;
            }
        }

        public Entity2D Parent { get; set; }




        public Point Point
        {
            get { return (Point)GetValue(PointProperty); }
            set
            {
                this.SatisfyRelations(ref value);
                SetValue(PointProperty, value);
            }
        }

        // Using a DependencyProperty as the backing store for Point.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty PointProperty =
            DependencyProperty.Register("Point", typeof(Point), typeof(Point2D), new PropertyMetadata(new Point(0, 0), OnDPropertyChanged));



        private static void OnDPropertyChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
        {
            var point2D = d as Point2D;
            point2D.Points[0] = point2D.Sketch.RefPlane.GetPoint3D(point2D.Point);
            point2D.UpdateGeometry();
        }


        public virtual bool IsDriven
		{
			get;
			set;
		}

        public IList<Relation2D> Relations2D { get; set; } = new List<Relation2D>();

        public virtual IList<Point2D> GetRelatingPoints()
		{
            //todo WTF??
            IList<Point2D> points = new List<Point2D>();
            points.Add(this);
            return points;
		}

        public void SatisfyRelations(ref Point point)
        {
            //foreach(Relation2D rel in this.Relations2D)
            //{
            //    rel.Satisfy();
            //}
        }

        public IList<Point> Intersection(IIntersectable shape)
        {
            return shape.Intersection(this);
        }

        public double X { get { return Point.X; } }
        public double Y { get { return Point.Y; } }
    }
}

