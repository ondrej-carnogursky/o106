//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace o3DLib.Sketching.Relations2D
{
	using o3DLib.Sketching;
	using System;
	using System.Collections.Generic;
	using System.Linq;
	using System.Text;

	public class Lock : Relation2D, IRelation2D
	{

        private IRelatable relatable;

        private double lockX;
        private double lockY;

        private IList<Relation2D> childRelations;

        public Lock(IRelatable relatable)
        {

            childRelations = new List<Relation2D>();

            this.relatable = relatable;


            if(this.relatable is Point2D)
            {

                this.lockX = (this.relatable as Point2D).X;
                this.lockY = (this.relatable as Point2D).Y;

                return;
            }

            IList<Point2D> relatingPoints = this.relatable.GetRelatingPoints();

            foreach (Point2D point in relatingPoints.Reverse())
            {
                Lock childLock = new Lock(point);
                childLock.Parent = this;
                point.Relations2D.Add(childLock);
                childRelations.Add(childLock);
            }

        }

		public override bool Satisfy()
		{
            bool state = true;
            if(this.relatable is Point2D)
            {
                (this.relatable as Point2D).X = this.lockX;
                (this.relatable as Point2D).Y = this.lockY;
            } else
            {
                foreach(IRelation2D relation in this.childRelations)
                {
                    if(!relation.Satisfy())
                    {
                        state = false;
                    }
                }
            }

            return state;

		}

	}
}

